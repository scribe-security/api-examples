{
	"info": {
		"_postman_id": "a347be16-903a-48c2-b96f-565267fb13b3",
		"name": "Scribe API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{api-url}}/dataset/token",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Datasets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var datasets = JSON.parse(responseBody).result;",
							"for (let i = 0; i < datasets.length; i++) {",
							"    postman.setEnvironmentVariable(\"dataset_\" + datasets[i].datasource_name.replace(/ /g,\"_\"), datasets[i].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query API",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"superset_token\": \"{{access_token}}\",\n  \"query\": {<<query here>>}\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Outdated dependencies",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", \",{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", \",{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", \",{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_asbom_filtered}},\n            \"type\": \"table\"\n        },\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"component_name\",\n                    \"scorecard_score\",\n                    \"source_layer\",\n                    \"maintenance_score\"\n                ],\n                \"filters\": [\n                    {\n                        \"col\": \"scorecard_score\",\n                        \"op\": \">=\",\n                        \"val\": \"3\"\n                    },\n                    {\n                        \"col\": \"version_is_up_to_date\",\n                        \"op\": \"==\",\n                        \"val\": false\n                    },\n                    {\n                        \"col\": \"maintenance_score\",\n                        \"op\": \">=\",\n                        \"val\": \"3\"\n                    }\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n                ],\n                 \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Licenses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"var firstFilter = true;",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_asbom_filtered}},\n            \"type\": \"table\"\n        },\n        \"queries\": [\n            {\n                \"columns\": [],\n                \"filters\": [\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n\n                ],\n                \"metrics\": [\n                    {\n                        \"expressionType\": \"SQL\",\n                        \"sqlExpression\": \"distinct unnest(string_to_array(licenses, ','))\",\n                        \"label\": \"License\"\n                    }\n                ],\n                \"orderby\": [\n                    [\n                        {\n                            \"expressionType\": \"SQL\",\n                            \"sqlExpression\": \"distinct unnest(string_to_array(licenses, ','))\"\n                        },\n                        true\n                    ]\n                ],\n                \"row_limit\": 0\n            }\n        ]\n    },\n    \"result_format\": \"json\",\n    \"result_type\": \"results\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query SBOMs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", \",{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", \",{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", \",{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_asbom_filtered}},\n            \"type\": \"table\"\n        },\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"attestation_id\",\n                    \"targetType\",\n                    \"targetName\"\n                ],\n                \"filters\": [\n                    {\n                        \"col\": \"targetType\",\n                        \"op\": \"IN\",\n                        \"val\": [\n                            \"git\",\n                            \"image\"\n                        ]\n                    }\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n                ],\n                 \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Vulnerabilities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", \",{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", \",{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", \",{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_CVE_Impact_v2}},\n            \"type\": \"table\"\n        },\n        \"force\": false,\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"vulnerability_id\",\n                    \"severity\"\n                ],\n                \"filters\": [\n                    {\n                        \"col\": \"severity\",\n                        \"op\": \">=\",\n                        \"val\": \"6\"\n                    }\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n                ],\n                 \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Vulnerabilities with advisory info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", \",{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", \",{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", \",{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_API_Vulnerabilities}},\n            \"type\": \"table\"\n        },\n        \"force\": false,\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"vulnerability_id\",\n                    \"severity\",\n                    \"final_severity\",\n                    \"advisoryText\",\n                    \"advisoryStatus\",\n                    \"advisoryJustification\"\n                ],\n                \"filters\": [\n                    {\n                        \"col\": \"final_severity\",\n                        \"op\": \">=\",\n                        \"val\": \"6\"\n                    }\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n                ],\n                 \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Attestation Context",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"var firstFilter = true;",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							"",
							"// set target name filter if target name is supplied",
							"if (pm.collectionVariables.get(\"component_name\")) {",
							"    pm.variables.set(\"component_filter\", (firstFilter ? \"\" : \",\") + \"{\\\"col\\\": \\\"targetName\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{component_name}}\\\"}\");",
							"    firstFilter = false;",
							"} else {",
							"    pm.variables.set(\"component_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_API_Attestations}},\n            \"type\": \"table\"\n        },\n        \"force\": false,\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"attestation_timestamp\",\n                    \"logical_app\",\n                    \"logical_app_version\",\n                    \"targetName\",\n                    \"context\"\n                ],\n                \"filters\": [\n                    {{product_filter}}\n                    {{version_filter}}\n                    {{component_filter}}\n\n                ],\n                \"extras\": {\n                    \"where\" : \"(context_elements ? '{{context_element}}')\"\n                },\n                \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Components",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set product filter if product key supplied",
							"if (pm.collectionVariables.get(\"product_name\")) {",
							"    pm.variables.set(\"product_filter\", \",{\\\"col\\\": \\\"logical_app\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_name}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"product_filter\", \"\");",
							"}",
							"",
							"// set version filter if product version is upplied",
							"if (pm.collectionVariables.get(\"product_version\")) {",
							"    pm.variables.set(\"version_filter\", \",{\\\"col\\\": \\\"logical_app_version\\\", \\\"op\\\": \\\"==\\\", \\\"val\\\": \\\"{{product_version}}\\\"}\");",
							"} else {",
							"    pm.variables.set(\"version_filter\", \"\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"superset_token\": \"{{access_token}}\",\n    \"query\": {\n        \"datasource\": {\n            \"id\": {{dataset_API_Attestations}},\n            \"type\": \"table\"\n        },\n        \"force\": false,\n        \"queries\": [\n            {\n               \"columns\": [\n                    \"attestation_timestamp\",\n                    \"logical_app\",\n                    \"logical_app_version\",\n                    \"targetName\",\n                    {\n                        \"label\": \"tag\",\n                        \"sqlExpression\": \"context->>'input_tag'\",\n                        \"expressionType\": \"SQL\"\n                    }\n                ],\n                \"filters\": [\n                    {\n                        \"col\": \"targetType\",\n                        \"op\": \"==\",\n                        \"val\": \"image\"\n                    }\n                    {{product_filter}}\n                    {{version_filter}}\n                ],\n                 \"metrics\": [],\n                \"row_limit\": 0\n            }\n        ],\n        \"result_format\": \"json\",\n        \"result_type\": \"results\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-url}}/dataset/data",
					"host": [
						"{{api-url}}"
					],
					"path": [
						"dataset",
						"data"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "grant_type",
				"value": "client_credentials",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{api-url}}/v1/login",
				"type": "string"
			},
			{
				"key": "tokenRequestParams",
				"value": [
					{
						"key": "api_token",
						"value": "{{api_token}}",
						"enabled": true,
						"send_as": "request_body"
					}
				],
				"type": "any"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "scribe-api",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "product_name",
			"value": "",
			"type": "default"
		},
		{
			"key": "product_version",
			"value": "",
			"type": "default"
		},
		{
			"key": "component_name",
			"value": "",
			"type": "default"
		},
		{
			"key": "context_element",
			"value": "",
			"type": "default"
		}
	]
}